# -*- coding: utf-8 -*-
"""Copy of Untitled65.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11nsK1ZWrHop0bdmUVwV2lBbZi6zHUFar
"""

#Task-1
import math
import random
def strength(x):
    return math.log2(x + 1) + (x / 10)
def utility(maxV, minV):
    t = random.randint(0, 1)
    random_component = (-1) ** t * (random.randint(1, 10) / 10)
    return (strength(maxV) - strength(minV) + random_component)
def minimax(depth, is_maximizing, alpha, beta, maxV, minV):
    if(depth == 5):
        return utility(maxV, minV)
    if is_maximizing:
        max_eval = -float('inf')
        for i in range(2):
            eval = minimax(depth + 1, False, alpha, beta, maxV, minV)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if(beta <= alpha):
                break
        return max_eval
    else:
        min_eval = float('inf')
        for j in range(2):
            eval = minimax(depth + 1, True, alpha, beta, maxV, minV)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if(beta <= alpha):
                break
        return min_eval
def play_game(start_player, maxV, minV):
    result = minimax(0, start_player == 0, -float('inf'), float('inf'), maxV, minV)
    if(result > 0):
        return "Magnus Carlsen (Max)", result
    elif(result < 0):
        return "Fabiano Caruana (Min)", result
    else:
        return "Draw", result
start_player = int(input("Enter starting player for game 1 (0 for Carlsen, 1 for Caruana): "))
carlsen_strength = float(input("Enter base strength for Carlsen: "))
caruana_strength = float(input("Enter base strength for Caruana: "))
results = {
    "Magnus Carlsen Wins": 0,
    "Fabiano Caruana Wins": 0,
    "Draws": 0
}
for i in range(1, 5):
    if(i % 2 == 1):
        maxV = carlsen_strength if start_player == 0 else caruana_strength
        minV = caruana_strength if start_player == 0 else carlsen_strength
    else:
        maxV = caruana_strength if start_player == 0 else carlsen_strength
        minV = carlsen_strength if start_player == 0 else caruana_strength
    winner, utility_value = play_game(start_player, maxV, minV)
    print(f"Game {i} Winner: {winner} (Utility value: {utility_value:.2f})")
    if("Magnus Carlsen" in winner):
        results["Magnus Carlsen Wins"] += 1
    elif("Fabiano Caruana" in winner):
        results["Fabiano Caruana Wins"] += 1
    else:
        results["Draws"] += 1
    start_player = 1 - start_player
print("\nOverall Results:")
print(f"Magnus Carlsen Wins: {results['Magnus Carlsen Wins']}")
print(f"Fabiano Caruana Wins: {results['Fabiano Caruana Wins']}")
print(f"Draws: {results['Draws']}")
if(results["Magnus Carlsen Wins"] > results["Fabiano Caruana Wins"]):
    print("Overall Winner: Magnus Carlsen")
elif(results["Fabiano Caruana Wins"] > results["Magnus Carlsen Wins"]):
    print("Overall Winner: Fabiano Caruana")
else:
    print("Overall Winner: Draw")

#Task-2

# import math
# import random
# def strength(x):
#     return math.log2(x + 1) + x / 10
# def utility(maxV, minV, i):
#     random_component = (-1) ** i * random.randint(1, 10) / 10
#     return strength(maxV) - strength(minV) + random_component
# def minimax(depth, is_maximizing, alpha, beta, maxV, minV, i):
#     if(depth == 5):
#         return utility(maxV, minV, i)
#     if is_maximizing:
#         max_eval = -math.inf
#         for i in range(2):
#             eval = minimax(depth + 1, False, alpha, beta, maxV, minV, i + 1)
#             max_eval = max(max_eval, eval)
#             alpha = max(alpha, eval)
#             if(beta <= alpha):
#                 break
#         return max_eval
#     else:
#         min_eval = math.inf
#         for j in range(2):
#             eval = minimax(depth + 1, True, alpha, beta, maxV, minV, i + 1)
#             min_eval = min(min_eval, eval)
#             beta = min(beta, eval)
#             if(beta <= alpha):
#                 break
#         return min_eval
def minimax_with_mind_control(depth, is_maximizing, alpha, beta, maxV, minV, i):
    if(depth == 5):
        return utility(maxV, minV, i)
    if is_maximizing:
        max_eval = -math.inf
        for i in range(2):
            eval = minimax_with_mind_control(depth + 1, False, alpha, beta, maxV, minV, i + 1)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if(beta <= alpha):
                break
        return max_eval
    else:
        min_eval = math.inf
        for j in range(2):
            eval = minimax_with_mind_control(depth + 1, True, alpha, beta, maxV, minV, i + 1)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if(beta <= alpha):
                break
        return min_eval
def light_l_problem():
    first_player = int(input("Enter who goes first (0 for Light, 1 for L): "))
    cost = float(input("Enter the cost of using Mind Control: "))
    light_strength = float(input("Enter base strength for Light: "))
    l_strength = float(input("Enter base strength for L: "))
    if(first_player == 0):
        maxV, minV = light_strength, l_strength
    else:
        maxV, minV = l_strength, light_strength
    value_without_mind_control = minimax(0, True, -math.inf, math.inf, maxV, minV, 0)
    value_with_mind_control = minimax_with_mind_control(0, True, -math.inf, math.inf, maxV, minV, 0)
    value_with_mind_control_cost = value_with_mind_control - cost
    print(f"Minimax value without Mind Control: {value_without_mind_control:.2f}")
    print(f"Minimax value with Mind Control: {value_with_mind_control:.2f}")
    print(f"Minimax value with Mind Control after incurring the cost: {value_with_mind_control_cost:.2f}")
    if(value_without_mind_control > 0):
        print("Light should NOT use Mind Control as the position is already winning.")
    elif(value_with_mind_control_cost > value_without_mind_control):
        print("Light should use Mind Control.")
    else:
        print("Light should NOT use Mind Control as the position is losing either way.")
light_l_problem()