# -*- coding: utf-8 -*-
"""Untitled64.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hl-hVRu4J0vuOVC3k2nTJYtcTqM-oApH
"""

# Part-1
file_object = open("input1.txt", 'r')
input_data = file_object.read().splitlines()
import random
def parse_chromosome(chromosome_str):
    chromosome_str = chromosome_str.strip('{}')
    parts = chromosome_str.split(',')
    stop_loss = float(parts[0].split(':')[1].strip())
    take_profit = float(parts[1].split(':')[1].strip())
    trade_size = float(parts[2].split(':')[1].strip())
    return {
        "stop_loss": stop_loss,
        "take_profit": take_profit,
        "trade_size": trade_size
    }
def genetic_algorithm(int_population, prices, int_cap, generations=50, population_size=10):
    population = int_population
    for i in range(generations):
        population = next_generation(population, prices, int_cap)
    fitness_scores = []
    for j in population:
        fitness = calculate_fitness(j, prices, int_cap)
        fitness_scores.append(fitness)
    best_index = fitness_scores.index(max(fitness_scores))
    best_strategy = population[best_index]
    final_profit = fitness_scores[best_index]
    return best_strategy, final_profit
def next_generation(population, prices, int_cap, mutation_rate=0.1):
    new_population = []
    fitness_scores = []
    for i in population:
        fitness = calculate_fitness(i, prices, int_cap)
        fitness_scores.append(fitness)
    best_index = fitness_scores.index(max(fitness_scores))
    new_population.append(population[best_index])
    while(len(new_population) < len(population)):
        parent1, parent2 = select_parents(population, fitness_scores)
        offspring1, offspring2 = crossover(parent1, parent2)
        offspring1 = mutate(offspring1, mutation_rate)
        offspring2 = mutate(offspring2, mutation_rate)
        new_population.extend([offspring1, offspring2])
    return new_population[:len(population)]
def select_parents(population, fitness_scores, tournament_size=3):
    selected = []
    for i in range(2):
        tournament_indices = random.sample(range(len(population)), tournament_size)
        best_index = tournament_indices[0]
        best_fitness = fitness_scores[best_index]
        for j in tournament_indices[1:]:
            if(fitness_scores[j] > best_fitness):
                best_index = j
                best_fitness = fitness_scores[j]
        selected.append(population[best_index])
    return selected
def crossover(parent1, parent2):
    parent1_str = f"{int(parent1['stop_loss'] * 10):02d}{int(parent1['take_profit'] * 10):02d}{int(parent1['trade_size'] * 10):02d}"
    parent2_str = f"{int(parent2['stop_loss'] * 10):02d}{int(parent2['take_profit'] * 10):02d}{int(parent2['trade_size'] * 10):02d}"
    crossover_point = random.randint(1, 5)
    offspring1_str = parent1_str[:crossover_point] + parent2_str[crossover_point:]
    offspring2_str = parent2_str[:crossover_point] + parent1_str[crossover_point:]
    offspring1 = {
        "stop_loss": max(1, min(99, int(offspring1_str[:2]) / 10)),
        "take_profit": max(1, min(99, int(offspring1_str[2:4]) / 10)),
        "trade_size": max(1, min(99, int(offspring1_str[4:]) / 10))
    }
    offspring2 = {
        "stop_loss": max(1, min(99, int(offspring2_str[:2]) / 10)),
        "take_profit": max(1, min(99, int(offspring2_str[2:4]) / 10)),
        "trade_size": max(1, min(99, int(offspring2_str[4:]) / 10))
    }
    return offspring1, offspring2
def mutate(chromosome, mutation_rate=0.1):
    if(random.random() < mutation_rate):
        gene = random.choice(["stop_loss", "take_profit", "trade_size"])
        chromosome[gene] = max(1, min(99, random.uniform(1, 99)))
    return chromosome
def calculate_fitness(chromosome, prices, int_cap):
    capital = int_cap
    stop_loss = chromosome["stop_loss"]
    take_profit = chromosome["take_profit"]
    trade_size = chromosome["trade_size"]
    for i in prices:
        trade_amount = capital * (trade_size / 100)
        if(i <= -stop_loss):
            profit_loss = trade_amount * (-stop_loss / 100)
        elif(i >= take_profit):
            profit_loss = trade_amount * (take_profit / 100)
        else:
            profit_loss = trade_amount * (i / 100)
        capital += profit_loss
    fitness = capital - int_cap
    return fitness
int_cap = float(input_data[0])
prices = list(map(float, input_data[1].strip('[]').split(',')))
int_population = []
for i in input_data[2:6]:
    chromosome = parse_chromosome(i)
    int_population.append(chromosome)
generations = int(input_data[6])
best_strategy, final_profit = genetic_algorithm(int_population, prices, int_cap, generations=50, population_size=10)
file_output_object = open("output1.txt", 'w')
file_output_object.write(f'{{"stop_loss": {round(best_strategy["stop_loss"], 1)}, "take_profit": {round(best_strategy["take_profit"], 1)}, "trade_size": {round(best_strategy["trade_size"], 1)}}}\n')
file_output_object.write(f'{{"Final_profit": {round(final_profit, 2)}}}\n')
def two_point_crossover(parent1, parent2):
    parent1_str = f"{int(parent1['stop_loss'] * 10):02d}{int(parent1['take_profit'] * 10):02d}{int(parent1['trade_size'] * 10):02d}"
    parent2_str = f"{int(parent2['stop_loss'] * 10):02d}{int(parent2['take_profit'] * 10):02d}{int(parent2['trade_size'] * 10):02d}"
    crossover_point1 = random.randint(1, 5)
    crossover_point2 = random.randint(crossover_point1 + 1, 6)
    offspring1_str = (
        parent1_str[:crossover_point1] +
        parent2_str[crossover_point1:crossover_point2] +
        parent1_str[crossover_point2:]
    )
    offspring2_str = (
        parent2_str[:crossover_point1] +
        parent1_str[crossover_point1:crossover_point2] +
        parent2_str[crossover_point2:]
    )
    return offspring1_str, offspring2_str
parent1, parent2 = random.sample(int_population, 2)
offspring1, offspring2 = two_point_crossover(parent1, parent2)
print("Parent 1:", f"{int(parent1['stop_loss'] * 10):02d}{int(parent1['take_profit'] * 10):02d}{int(parent1['trade_size'] * 10):02d}")
print("Parent 2:", f"{int(parent2['stop_loss'] * 10):02d}{int(parent2['take_profit'] * 10):02d}{int(parent2['trade_size'] * 10):02d}")
print("Offspring 1:", offspring1)
print("Offspring 2:", offspring2)