# -*- coding: utf-8 -*-
"""Untitled63.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1plEZurf40D2lBCzCqp-vQw5ydSlF8VlJ
"""

from heapq import heappop, heappush
file_object = open("input1.txt", 'r')
file_output_object = open("output1.txt", 'w')
def a_star_algo(graph, start, goal, heuristics):
    priority_queue = [(heuristics[start], 0, start, [])]
    visited_nodes = set()
    while priority_queue:
        a, cost_so_far, node, path = heappop(priority_queue)
        if(node in visited_nodes):
            continue
        path = path + [node]
        visited_nodes.add(node)
        if(node == goal):
            return cost_so_far, path
        for i, j in graph.get(node, []):
            if(i not in visited_nodes):
                total_cost = cost_so_far + j
                heuristic_cost = total_cost + heuristics[i]
                heappush(priority_queue, (heuristic_cost, total_cost, i, path))
    return -1
romania_map = {}
heuristics = {}
for i in file_object:
    parts = i.split()
    city, heuristic_value = parts[0], int(parts[1])
    neighbors = [(parts[i], int(parts[i + 1])) for i in range(2, len(parts), 2)]
    romania_map[city] = neighbors
    heuristics[city] = heuristic_value
startNode = input("Start node: ").strip()
destination = input("Destination: ").strip()
if(startNode not in heuristics or destination not in heuristics):
    output_str = "Invalid start or destination node.\n"
    print(output_str)
    file_output_object.write(output_str)
else:
    result = a_star_algo(romania_map, startNode, destination, heuristics)
    if(result != -1):
        totalDistance, path = result
        output_str = f"Path: {' -> '.join(path)}\nTotal Distance: {totalDistance} km\n"
    else:
        output_str = "NO PATH FOUND\n"
    print(output_str)
    file_output_object.write(output_str)